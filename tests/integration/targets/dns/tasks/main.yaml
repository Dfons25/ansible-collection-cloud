---
- name: Doing Integration test
  block:
    - name: Set random prefix
      set_fact:
        prefix: "{{ 99999999 | random | to_uuid | hash('md5') }}"

    - name: Assigning Floating IP
      floating_ip:
        network: admin_external_net
      register: fl

    - name: Set facts
      set_fact:
        fl_ip: "{{ fl.floating_ip.floating_ip_address }}"
        ptrdname: "{{ ( prefix + '.com.' ) }}"
        description: "{{ ( prefix + 'description' ) }}"
        zone_name: "{{ ( prefix + '-zone.com.' ) }}"
        rs_name: "{{ ( prefix + '-rs.' + prefix + '-zone.com.' ) }}"
    
    - name: Creating a dns_floating_ip entry
      dns_floating_ip:
        floating_ip: "{{ fl_ip }}"
        ptrdname: "{{ ptrdname }}"
        state: present
      register: dns_fl

    - name: debug
      debug:
        var: dns_fl.ptr

    - name: assert result
      assert:
        that:
          - dns_fl is success
          - dns_fl.ptr is defined

    - name: Updating a dns_floating_ip entry
      dns_floating_ip:
        floating_ip: "{{ fl_ip }}"
        ptrdname: "{{ ptrdname }}"
        description: "{{ description }}"
        state: present
      register: dns_fl

    - name: debug
      debug:
        var: dns_fl.ptr

    - name: assert result
      assert:
        that:
          - dns_fl is success
          - dns_fl.ptr.description is defined



    
    - name: Creating a DNS Zone
      dns_zones:
        name: "{{ zone_name }}"
        state: present
      register: dns_zo
    
    - name: debug
      debug:
        var: dns_zo.zone

    - name: assert result
      assert:
        that:
          - dns_zo is success
          - dns_zo.zone is defined

    - name: Updating a DNS Zone
      dns_zones:
        name: "{{ zone_name }}"
        state: present
        description: "{{ description }}"
      register: dns_zo

    - name: debug
      debug:
        var: dns_zo.zone

    - name: assert result
      assert:
        that:
          - dns_zo is success
          - dns_zo.zone.description is defined




    - name: Creating a DNS Recordset
      dns_recordset:
        zone_id: "{{ dns_zo.zone.id }}"
        recordset_name: "{{ rs_name }}"
        type: A
        records:
          - "1.1.1.1"
          - "2.2.2.2"
        state: present
      register: dns_rs

    - name: debug
      debug:
        var: dns_rs.recordset

    - name: assert result
      assert:
        that:
          - dns_rs is success
          - dns_rs.recordset is defined

    - name: Updating a DNS Recordset
      dns_recordset:
        zone_id: "{{ dns_zo.zone.id }}"
        recordset_name: "{{ rs_name }}"
        type: A
        description: "{{ description }}"
        records:
          - "1.1.1.1"
          - "2.2.2.2"
        state: present
      register: dns_rs

    - name: debug
      debug:
        var: dns_rs.recordset

    - name: assert result
      assert:
        that:
          - dns_rs is success
          - dns_rs.recordset.description is defined


  always:
    - block:
      - name: Drop dns_floating_ip entry
        dns_floating_ip:
          floating_ip: "{{ fl_ip }}"
          state: absent
        register: dns_fl_dr

      - name: Dropping DNS Recordset
        dns_recordset:
          zone_id: "{{ dns_zo.zone.id }}"
          recordset_name: "{{ rs_name }}"
          state: absent
        register: dns_rs_dr

      - name: Drop DNS Zone
        dns_zones:
          name: "{{ zone_name }}"
          state: absent
        register: dns_zo_dr

      - name: Drop Floating IP
        floating_ip:
          floating_ip_address: "{{ fl_ip }}"
          state: absent
          purge: True
        register: fl_dr
